import React        from 'react';
import $            from 'jquery';
import CommentList  from './CommentList/CommentList.jsx!';
import CommentForm  from './CommentForm/CommentForm.jsx!';
 

export default class CommentBox extends React.Component {
	
  constructor(props) {
  super(props);
  this.init();      //init() = initialization function : just convention to avoid constructor pollution
  }
 
  init(){
    this.state = {data: []}; //ES6 way to getInitialState() = set state in constructor
  }


  loadCommentsFromServer() {
    $.ajax({
      url       : this.props.url,
      dataType  : 'json',
      cache     : false,
      success   : (data)=>{
        this.setState({data: data});
      }, //no more need to bind(this) this since ES6 arrow function
      error     : (xhr, status, err)=>{
        console.error(this.props.url, status, err.toString());
      } //no more need to bind(this) this since ES6 arrow function 
    });
  }
  
  handleCommentSubmit(comment) {
    let comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});  
      
    $.ajax({
      url       : this.props.url,
      dataType  : 'json',
      type      : 'POST',
      data      : comment,
      success   : (data)=>{
        this.setState({data: data});
      },
      error     : (xhr, status, err)=>{
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }
    });
  }  


 componentDidMount() {
    this.loadCommentsFromServer();
    //setInterval(this.loadCommentsFromServer.bind(this), this.props.pollInterval); //need to bind this to comboBox since loadCommentsFromServer() won't execcute in CommentBox context!
    setInterval(()=>this.loadCommentsFromServer, this.props.pollInterval);          //ES6 version to upper line :  save pain with ES6 arrow function :  "()=>this.loadCommentsFromServer === this.loadCommentsFromServer.bind(this)" but don't have to worry about bind(this)
  }


 render(){
	 return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} />
        <CommentForm onCommentSubmit={comment => this.handleCommentSubmit(comment)} />
      </div>
    );
 }
 
}
